apiVersion: v1
kind: ServiceAccount
metadata:
  name: nvpeermem
  namespace: openshift-sro
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: nvpeermem
  namespace: openshift-sro
rules:
- apiGroups:
  - security.openshift.io
  resources:
  - securitycontextconstraints
  verbs:
  - use
  resourceNames:
  - privileged
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: nvpeermem
  namespace: openshift-sro
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: nvpeermem
  namespace: openshift-sro
subjects:
- kind: ServiceAccount
  name: nvpeermem
  namespace: openshift-sro
userNames:
- system:serviceaccount:openshift-sro:nvpeermem
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nvpeermem-entrypoint
  namespace: openshift-sro
data:
  entrypoint.sh: |-
    #!/bin/bash -x
    #cd /root
    #./insmod.sh
    depmod -a
    echo "Loading nv_peer_mem"
    modprobe nv_peer_mem
    echo "DOne"
    sleep infinity
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  labels:
    app: nvpeermem-daemonset
  name: nvpeermem-daemonset
  namespace: openshift-sro
  annotations:
    openshift.io/scc: nvpeermem
    callback: nvpeermem-daemonset
spec:
  selector:
    matchLabels:
      app: nvpeermem-daemonset
  template:
    metadata:
      # Mark this pod as a critical add-on; when enabled, the critical add-on scheduler
      # reserves resources for critical add-on pods so that they can be rescheduled after
      # a failure.  This annotation works in tandem with the toleration below.
      annotations:
        scheduler.alpha.kubernetes.io/critical-pod: ""
      labels:
        app: nvpeermem-daemonset
    spec:
      tolerations:
      - operator: Exists
      - key: nvidia.com/gpu
        operator: Exists
        effect: NoSchedule
      serviceAccount: nvpeermem
      serviceAccountName: nvpeermem
      hostPID: true
      containers:
      - image: quay.io/openshift-psap/nv_peer_memory:n440.33.01-m4.7-1.0.0.1-k4.18.0-147.3.1.el8_1.x86_64
        imagePullPolicy: Always
        name: nvpeermem-ctr
        command: ["/bin/entrypoint.sh"]
        securityContext:
          privileged: true
        volumeMounts:
        - name: entrypoint
          mountPath: /bin/entrypoint.sh
          readOnly: true
          subPath: entrypoint.sh
        - name: devices
          mountPath: /dev
      volumes:
      - name: devices
        hostPath: 
          path: /dev
      - name: entrypoint
        configMap:
          defaultMode: 0700
          name: nvpeermem-entrypoint
      nodeSelector:
        node-role.kubernetes.io/worker: ""
        feature.node.kubernetes.io/pci-10de.present: "true"

